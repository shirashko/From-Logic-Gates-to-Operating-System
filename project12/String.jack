// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0){
            let str =  Array.new(1);
        }
        else{
            let str =  Array.new(maxLength);
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1; 
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, count, d, neg;
        let val = 0;
        if (charAt(0) = 45){
            let count = 1;
            let neg = 1;
        }
        else{
            let count = 0;
            let neg = 0;
        }
        while ((count < length) & ((str[count] > 47) & (str[count] < 58))){ // make sure & is ok. check current char is a digit, meaning is in range 48..57
            let d = str[count] - 48;
            let val = (val * 10) + d;
            let count = count + 1;
        }
        if (neg = 1){
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // in the table they gave us- error if this method called with Insufficient string capacity (so we can rely on that)
        var int last_digit, c;
        
        let last_digit = val - (10 * (val/10)); // equivalent to val % 10. will be a digit in range 0..9 represented in ASCII code as 48..57
        let c = 48 + Math.abs(last_digit);
        if ((val < 10) & (val > -10)){
            if (val > -1){
                let length = 1;
                let str[0] = c;
                return;
            }
            else{
                let length = 2;
                let str[0] = 45;
                let str[1] = c;
                return;
            }  
        }
        else{
            do setInt(val/10);
            do appendChar(c); 
            return;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128; // to make sure it's the right code for the last three functions
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
