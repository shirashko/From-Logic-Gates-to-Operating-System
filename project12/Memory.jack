// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array heap, ram;
    static int freelist;

    /** Initializes the class. */ 
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let heap = 2048;
        let heap[0] = 0;
        let heap[1] = 14334;
        let freelist = 2048;
        let ram = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var int block, pointer, curr_size, last_pointer, end_check;
        let pointer = freelist;
        let last_pointer = pointer;
        let end_check = 1;
        while (end_check > 0){
            let curr_size = Memory.peek(pointer + 1);
            if (curr_size < (size + 2)){
                let last_pointer = pointer;
                let pointer = Memory.peek(pointer);
                let end_check = pointer;
            }
            else{
                let block = pointer + 2 + (curr_size - size);
                do Memory.poke(block - 1, size);
                do Memory.poke(block - 2, 0);
                do Memory.poke(pointer + 1, curr_size - (size + 2));
                if (curr_size - (size + 2) = 0){
                    do Memory.poke(last_pointer, Memory.peek(pointer));
                }
                return block;
            }
        }
            
        return -1;
        }   

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array obj) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeLis
        var int pointer;
        let pointer = freelist;
        while (Memory.peek(pointer) > 0){
            let pointer = Memory.peek(pointer);
        }
        do Memory.poke(pointer, obj - 2);
        return;
    }
       

    /** Returns the maximal element contained in the given Array/object. 
     * Assume inputs are initialized and contain at least one element. */
	function int max(Array obj) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int size, max, count;
        let size = Memory.peek(obj - 1);
        let count = 1;
        let max = obj[0];
        while (count < size){
            if (obj[count] > max){
                let max = obj[count];
            }
            let count = count + 1;
        }
        return max;
    }
}
