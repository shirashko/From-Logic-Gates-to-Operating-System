// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // deciding if it's a C instruction or an A instruction by the msb in the instruction. if it's an A instruction- take the address 
    // and put it at A register. otherwise take prev outM=ALUout (in case of prev instruction was M=1 for example and now D=M)
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=AorPrevM); //instruction[15] - opcodes
    /** A instruction - instruction[15] = 0, instruction[5] doesn't mind - you should load anyway
    instruction[5] , instruction[15]
    0                 0 A instruction
    1                 0 A instruction
    1                 1 C instruction
    0                 1 bad! **/
    Not(in=instruction[5], out=toLoadIfC);
    Nand(a=toLoadIfC, b=instruction[15], out=toLoadA);
    ARegister(in=AorPrevM, load=toLoadA, out[0..14]=addressM, out=Aout); 

    Mux16(a=Aout, b=inM, sel=instruction[12], out=AorM); // instruction[12] indicate if the C instruction use A or with M. 
    // a=0 - A, a=1 - M. to check if I need to consider the case of an A instruction

    // need to load D register only if it's a C construction and if load bit of D is 1
    And(a=instruction[4], b=instruction[15], out=toLoadD);
    DRegister(in=ALUout, load=toLoadD, out=Dout); // D register

    And(a=instruction[3], b=instruction[15], out=writeM); // iff it's a C instruction (1) and the load bit of M is 1 so writeM = 1

    ALU(x=Dout, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], 
    f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=zr, ng=ng); 


    // there is a jump when...
    // j3 == 1 and zr == 0 and ng == 0 (the number is positive)
    // j2 == 1 and zr == 1 
    // j1 == 1 and zr == 0 and ng == 1
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=isPositive); 
    And(a=instruction[0], b=isPositive, out=opt1);
    And(a=instruction[1], b=zr, out=opt2); 
    And(a=instruction[2], b=ng, out=opt3);
    Or(a=opt1, b=opt2, out=opt12);
    Or(a=opt3, b=opt12, out=jump); // final if to jump. jump decide if the PC need to jump to another instruction (the load bit)

    And(a=instruction[15], b=jump, out=jumping); // need to jump only if it's a C instruction, otherwise the checks we did not relavent

    PC(in=Aout, load=jumping, inc=true, reset=reset, out[0..14]=pc); // to check if inc=true is ok because we skip the option of out[t+1] = out[t]

}
/**
000 no jump
001 if comp > 0 jump, zr,ng = 0
010 if comp = 0 jump, zr = 1 , ng = 0
011
100
101
110
111
zr, // 1 if (out == 0), 0 otherwise
ng; // 1 if (out < 0),  0 otherwise

// instruction[0] = j3, instruction[1] = j2, instruction[2] = j1
// there is a jump when...
// j3 == 1 and zr == 0 and ng == 0 (the number is positive)
// j2 == 1 and zr == 1 
// j1 == 1 and ng == 1

