// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // You're advised to work on the ALU chip in two steps:
   // - First, without handling status outputs (ALU-nostat)
   // - Then, adding the missing functionality for the "full" chip (ALU). 
   // You only need to submit the "full" ALU, no need to submit the partial
   // implementation (ALU-nostat).
   // Put you code here:
   Mux16(a=x, b=false, sel=zx, out=zX);
   Not16(in=zX, out=notX);
   Mux16(a=zX, b=notX, sel=nx, out=nX);
   
   Mux16(a=y, b=false, sel=zy, out=zY);
   Not16(in=zY, out=notY);
   Mux16(a=zY, b=notY, sel=ny, out=nY);
   
   Add16(a=nX, b=nY, out=XandY);
   And16(a=nX, b=nY, out=XorY);
   Mux16(a=XorY, b=XandY, sel=f, out=XfuncY);

   Not16(in=XfuncY, out=noXYfunc);
   Mux16(a=XfuncY, b=noXYfunc, sel=no, out=out, out[0..7]=out1, out[8..15]=out2, out[15]=ng); //ng is decided according to 
   // rightest bit
   
   // 1 means it is not zero, 0 means it is zero
   Or8Way(in=out1, out=isZero1); 
   Or8Way(in=out2, out=isZero2); 
   Or(a=isZero1, b=isZero2, out=isZero); 
   Not(in=isZero, out=zr); // if (out == 0) set zr = 1
}
